/*
 * generated by Xtext 2.10.0
 */
package org.smalluml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmallUMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DiagramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Diagram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDiagramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDiagramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntitiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntitiesDiagramEntityParserRuleCall_4_0 = (RuleCall)cEntitiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Entry rule generating a SmallUML Diagram
		//Diagram:
		//	{Diagram}
		//	'Diagram'
		//	name=ID
		//	'{'
		//	entities+=DiagramEntity*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Diagram} 'Diagram' name=ID '{' entities+=DiagramEntity* '}'
		public Group getGroup() { return cGroup; }
		
		//{Diagram}
		public Action getDiagramAction_0() { return cDiagramAction_0; }
		
		//'Diagram'
		public Keyword getDiagramKeyword_1() { return cDiagramKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//entities+=DiagramEntity*
		public Assignment getEntitiesAssignment_4() { return cEntitiesAssignment_4; }
		
		//DiagramEntity
		public RuleCall getEntitiesDiagramEntityParserRuleCall_4_0() { return cEntitiesDiagramEntityParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DiagramEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.DiagramEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DiagramEntity:
		//	AbstractEntity | Association;
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractEntity | Association
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbstractEntity
		public RuleCall getAbstractEntityParserRuleCall_0() { return cAbstractEntityParserRuleCall_0; }
		
		//Association
		public RuleCall getAssociationParserRuleCall_1() { return cAssociationParserRuleCall_1; }
	}
	public class AbstractEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.AbstractEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Rule grouping AbstractEntity's related rules
		//AbstractEntity:
		//	Class | Enumeration | Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Class | Enumeration | Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_1() { return cEnumerationParserRuleCall_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Type:
		//	{Type}
		//	'Type'
		//	name=ID
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Type} 'Type' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//{Type}
		public Action getTypeAction_0() { return cTypeAction_0; }
		
		//'Type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtendsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cExtendsClassCrossReference_4_1_0 = (CrossReference)cExtendsAssignment_4_1.eContents().get(0);
		private final RuleCall cExtendsClassEStringParserRuleCall_4_1_0_1 = (RuleCall)cExtendsClassCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAttributesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cAttributesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_6_2_0 = (RuleCall)cAttributesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cAttributesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_6_3_1_0 = (RuleCall)cAttributesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cOperationsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cOperationsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cOperationsOperationParserRuleCall_7_2_0 = (RuleCall)cOperationsAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cOperationsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_7_3_1_0 = (RuleCall)cOperationsAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// Rule generating a Class
		//Class:
		//	{Class} abstract?='abstract'?
		//	'Class'
		//	name=EString ('extends' extends=[Class|EString])?
		//	'{' ('attributes' '(' attributes+=Attribute (',' attributes+=Attribute)* ')')? ('operations' '(' operations+=Operation
		//	(',' operations+=Operation)* ')')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Class} abstract?='abstract'? 'Class' name=EString ('extends' extends=[Class|EString])? '{' ('attributes' '('
		//attributes+=Attribute (',' attributes+=Attribute)* ')')? ('operations' '(' operations+=Operation (','
		//operations+=Operation)* ')')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Class}
		public Action getClassAction_0() { return cClassAction_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//'Class'
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('extends' extends=[Class|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//extends=[Class|EString]
		public Assignment getExtendsAssignment_4_1() { return cExtendsAssignment_4_1; }
		
		//[Class|EString]
		public CrossReference getExtendsClassCrossReference_4_1_0() { return cExtendsClassCrossReference_4_1_0; }
		
		//EString
		public RuleCall getExtendsClassEStringParserRuleCall_4_1_0_1() { return cExtendsClassEStringParserRuleCall_4_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('attributes' '(' attributes+=Attribute (',' attributes+=Attribute)* ')')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'attributes'
		public Keyword getAttributesKeyword_6_0() { return cAttributesKeyword_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_6_2() { return cAttributesAssignment_6_2; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_2_0() { return cAttributesAttributeParserRuleCall_6_2_0; }
		
		//(',' attributes+=Attribute)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//','
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//attributes+=Attribute
		public Assignment getAttributesAssignment_6_3_1() { return cAttributesAssignment_6_3_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_3_1_0() { return cAttributesAttributeParserRuleCall_6_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//('operations' '(' operations+=Operation (',' operations+=Operation)* ')')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'operations'
		public Keyword getOperationsKeyword_7_0() { return cOperationsKeyword_7_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_7_2() { return cOperationsAssignment_7_2; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_7_2_0() { return cOperationsOperationParserRuleCall_7_2_0; }
		
		//(',' operations+=Operation)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//','
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//operations+=Operation
		public Assignment getOperationsAssignment_7_3_1() { return cOperationsAssignment_7_3_1; }
		
		//Operation
		public RuleCall getOperationsOperationParserRuleCall_7_3_1_0() { return cOperationsOperationParserRuleCall_7_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeAbstractEntityCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeAbstractEntityEStringParserRuleCall_3_0_1 = (RuleCall)cTypeAbstractEntityCrossReference_3_0.eContents().get(1);
		
		//// Rule generating an Attribute
		//Attribute:
		//	{Attribute} name=ID ':' type=[AbstractEntity|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//{Attribute} name=ID ':' type=[AbstractEntity|EString]
		public Group getGroup() { return cGroup; }
		
		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[AbstractEntity|EString]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[AbstractEntity|EString]
		public CrossReference getTypeAbstractEntityCrossReference_3_0() { return cTypeAbstractEntityCrossReference_3_0; }
		
		//EString
		public RuleCall getTypeAbstractEntityEStringParserRuleCall_3_0_1() { return cTypeAbstractEntityEStringParserRuleCall_3_0_1; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReturnTypeAbstractEntityCrossReference_1_0 = (CrossReference)cReturnTypeAssignment_1.eContents().get(0);
		private final RuleCall cReturnTypeAbstractEntityEStringParserRuleCall_1_0_1 = (RuleCall)cReturnTypeAbstractEntityCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersParameterParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_5_1_0 = (RuleCall)cParametersAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Rule generating an Operation
		//Operation:
		//	{Operation} returnType=[AbstractEntity|EString]? name=EString '(' parameters+=Parameter? (',' parameters+=Parameter)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Operation} returnType=[AbstractEntity|EString]? name=EString '(' parameters+=Parameter? (',' parameters+=Parameter)*
		//')'
		public Group getGroup() { return cGroup; }
		
		//{Operation}
		public Action getOperationAction_0() { return cOperationAction_0; }
		
		//returnType=[AbstractEntity|EString]?
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//[AbstractEntity|EString]
		public CrossReference getReturnTypeAbstractEntityCrossReference_1_0() { return cReturnTypeAbstractEntityCrossReference_1_0; }
		
		//EString
		public RuleCall getReturnTypeAbstractEntityEStringParserRuleCall_1_0_1() { return cReturnTypeAbstractEntityEStringParserRuleCall_1_0_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//parameters+=Parameter?
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_0() { return cParametersParameterParserRuleCall_4_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_5_1() { return cParametersAssignment_5_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_1_0() { return cParametersParameterParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cTypeAbstractEntityCrossReference_1_0_0 = (CrossReference)cTypeAssignment_1_0.eContents().get(0);
		private final RuleCall cTypeAbstractEntityEStringParserRuleCall_1_0_0_1 = (RuleCall)cTypeAbstractEntityCrossReference_1_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//// Rule generating a Parameter
		//Parameter:
		//	{Parameter} (type=[AbstractEntity|EString] ':')? name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter} (type=[AbstractEntity|EString] ':')? name=EString
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//(type=[AbstractEntity|EString] ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//type=[AbstractEntity|EString]
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//[AbstractEntity|EString]
		public CrossReference getTypeAbstractEntityCrossReference_1_0_0() { return cTypeAbstractEntityCrossReference_1_0_0; }
		
		//EString
		public RuleCall getTypeAbstractEntityEStringParserRuleCall_1_0_0_1() { return cTypeAbstractEntityEStringParserRuleCall_1_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssociationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAssociationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRolesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRolesRoleParserRuleCall_4_0 = (RuleCall)cRolesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRolesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRolesRoleParserRuleCall_5_1_0 = (RuleCall)cRolesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Rule generating an Association, with 2+ role
		//Association:
		//	{Association}
		//	'Association'
		//	name=ID
		//	'{'
		//	roles+=Role (',' roles+=Role)+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Association} 'Association' name=ID '{' roles+=Role (',' roles+=Role)+ '}'
		public Group getGroup() { return cGroup; }
		
		//{Association}
		public Action getAssociationAction_0() { return cAssociationAction_0; }
		
		//'Association'
		public Keyword getAssociationKeyword_1() { return cAssociationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//roles+=Role
		public Assignment getRolesAssignment_4() { return cRolesAssignment_4; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_4_0() { return cRolesRoleParserRuleCall_4_0; }
		
		//(',' roles+=Role)+
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//roles+=Role
		public Assignment getRolesAssignment_5_1() { return cRolesAssignment_5_1; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_5_1_0() { return cRolesRoleParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRoleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cCardinalityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCardinalityCardinalityParserRuleCall_3_0 = (RuleCall)cCardinalityAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEntityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cEntityClassCrossReference_5_0 = (CrossReference)cEntityAssignment_5.eContents().get(0);
		private final RuleCall cEntityClassEStringParserRuleCall_5_0_1 = (RuleCall)cEntityClassCrossReference_5_0.eContents().get(1);
		
		//// Rule generating a Role, with a name, a cardinality and a reference to a class
		//Role:
		//	{Role}
		//	'role' name=ID cardinality=Cardinality 'with' entity=[Class|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//{Role} 'role' name=ID cardinality=Cardinality 'with' entity=[Class|EString]
		public Group getGroup() { return cGroup; }
		
		//{Role}
		public Action getRoleAction_0() { return cRoleAction_0; }
		
		//'role'
		public Keyword getRoleKeyword_1() { return cRoleKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_3() { return cCardinalityAssignment_3; }
		
		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_3_0() { return cCardinalityCardinalityParserRuleCall_3_0; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//entity=[Class|EString]
		public Assignment getEntityAssignment_5() { return cEntityAssignment_5; }
		
		//[Class|EString]
		public CrossReference getEntityClassCrossReference_5_0() { return cEntityClassCrossReference_5_0; }
		
		//EString
		public RuleCall getEntityClassEStringParserRuleCall_5_0_1() { return cEntityClassEStringParserRuleCall_5_0_1; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Cardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCardinalityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLowerBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLowerBoundEStringParserRuleCall_2_0 = (RuleCall)cLowerBoundAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUpperBoundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUpperBoundEStringParserRuleCall_4_0 = (RuleCall)cUpperBoundAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Rule generating a Cardinality, with a lower and a upper bound
		//Cardinality:
		//	{Cardinality}
		//	'[' lowerBound=EString ',' upperBound=EString ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Cardinality} '[' lowerBound=EString ',' upperBound=EString ']'
		public Group getGroup() { return cGroup; }
		
		//{Cardinality}
		public Action getCardinalityAction_0() { return cCardinalityAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//lowerBound=EString
		public Assignment getLowerBoundAssignment_2() { return cLowerBoundAssignment_2; }
		
		//EString
		public RuleCall getLowerBoundEStringParserRuleCall_2_0() { return cLowerBoundEStringParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//upperBound=EString
		public Assignment getUpperBoundAssignment_4() { return cUpperBoundAssignment_4; }
		
		//EString
		public RuleCall getUpperBoundEStringParserRuleCall_4_0() { return cUpperBoundEStringParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumerationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsEStringParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElementsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElementsEStringParserRuleCall_5_1_0 = (RuleCall)cElementsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Rule generating Enumeration
		//Enumeration:
		//	{Enumeration}
		//	'Enumeration'
		//	name=ID
		//	'{'
		//	elements+=EString (',' elements+=EString)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Enumeration} 'Enumeration' name=ID '{' elements+=EString (',' elements+=EString)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Enumeration}
		public Action getEnumerationAction_0() { return cEnumerationAction_0; }
		
		//'Enumeration'
		public Keyword getEnumerationKeyword_1() { return cEnumerationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=EString
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//EString
		public RuleCall getElementsEStringParserRuleCall_4_0() { return cElementsEStringParserRuleCall_4_0; }
		
		//(',' elements+=EString)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//elements+=EString
		public Assignment getElementsAssignment_5_1() { return cElementsAssignment_5_1; }
		
		//EString
		public RuleCall getElementsEStringParserRuleCall_5_1_0() { return cElementsEStringParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Types from ecore
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final DiagramElements pDiagram;
	private final DiagramEntityElements pDiagramEntity;
	private final AbstractEntityElements pAbstractEntity;
	private final TypeElements pType;
	private final ClassElements pClass;
	private final AttributeElements pAttribute;
	private final OperationElements pOperation;
	private final ParameterElements pParameter;
	private final AssociationElements pAssociation;
	private final RoleElements pRole;
	private final CardinalityElements pCardinality;
	private final EnumerationElements pEnumeration;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmallUMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDiagram = new DiagramElements();
		this.pDiagramEntity = new DiagramEntityElements();
		this.pAbstractEntity = new AbstractEntityElements();
		this.pType = new TypeElements();
		this.pClass = new ClassElements();
		this.pAttribute = new AttributeElements();
		this.pOperation = new OperationElements();
		this.pParameter = new ParameterElements();
		this.pAssociation = new AssociationElements();
		this.pRole = new RoleElements();
		this.pCardinality = new CardinalityElements();
		this.pEnumeration = new EnumerationElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.smalluml.SmallUML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Entry rule generating a SmallUML Diagram
	//Diagram:
	//	{Diagram}
	//	'Diagram'
	//	name=ID
	//	'{'
	//	entities+=DiagramEntity*
	//	'}';
	public DiagramElements getDiagramAccess() {
		return pDiagram;
	}
	
	public ParserRule getDiagramRule() {
		return getDiagramAccess().getRule();
	}
	
	//DiagramEntity:
	//	AbstractEntity | Association;
	public DiagramEntityElements getDiagramEntityAccess() {
		return pDiagramEntity;
	}
	
	public ParserRule getDiagramEntityRule() {
		return getDiagramEntityAccess().getRule();
	}
	
	//// Rule grouping AbstractEntity's related rules
	//AbstractEntity:
	//	Class | Enumeration | Type;
	public AbstractEntityElements getAbstractEntityAccess() {
		return pAbstractEntity;
	}
	
	public ParserRule getAbstractEntityRule() {
		return getAbstractEntityAccess().getRule();
	}
	
	//Type:
	//	{Type}
	//	'Type'
	//	name=ID
	//	';';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//// Rule generating a Class
	//Class:
	//	{Class} abstract?='abstract'?
	//	'Class'
	//	name=EString ('extends' extends=[Class|EString])?
	//	'{' ('attributes' '(' attributes+=Attribute (',' attributes+=Attribute)* ')')? ('operations' '(' operations+=Operation
	//	(',' operations+=Operation)* ')')?
	//	'}';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//// Rule generating an Attribute
	//Attribute:
	//	{Attribute} name=ID ':' type=[AbstractEntity|EString];
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//// Rule generating an Operation
	//Operation:
	//	{Operation} returnType=[AbstractEntity|EString]? name=EString '(' parameters+=Parameter? (',' parameters+=Parameter)*
	//	')';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//// Rule generating a Parameter
	//Parameter:
	//	{Parameter} (type=[AbstractEntity|EString] ':')? name=EString;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//// Rule generating an Association, with 2+ role
	//Association:
	//	{Association}
	//	'Association'
	//	name=ID
	//	'{'
	//	roles+=Role (',' roles+=Role)+
	//	'}';
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//// Rule generating a Role, with a name, a cardinality and a reference to a class
	//Role:
	//	{Role}
	//	'role' name=ID cardinality=Cardinality 'with' entity=[Class|EString];
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//// Rule generating a Cardinality, with a lower and a upper bound
	//Cardinality:
	//	{Cardinality}
	//	'[' lowerBound=EString ',' upperBound=EString ']';
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//// Rule generating Enumeration
	//Enumeration:
	//	{Enumeration}
	//	'Enumeration'
	//	name=ID
	//	'{'
	//	elements+=EString (',' elements+=EString)*
	//	'}';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//// Types from ecore
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
