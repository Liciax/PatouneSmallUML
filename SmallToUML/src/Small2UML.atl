-- @path MM=/SmallUML/model/smalluml.ecore
-- @path MM1=/UML/model/uml.ecore

module Small2UML;
create OUT : MM1 from IN : MM;

rule SmallDiagram2Diagram {
	from
		f : MM!Diagram
	to
		t : MM1!Package (
			name <- f.name,
			packagedElement <- f.entities
		)
}

rule SmallType2Type {
	from
		f : MM!Type
	to
		t : MM1!DataType (
			name <- f.name
		)
}

rule SmallClass2Class {
	from
		f : MM!Class
	to
		t1 : MM1!Class (
			name <- f.name,
			ownedAttribute <- f.attributes,
			ownedOperation <- f.operations,
			superClass <- f.extends,
			isAbstract <- f.abstract
		)	
}

rule SmallAttribute2Attribute {
	from
		f : MM!Attribute
	to
		t : MM1!Property (
			name <- f.name,
			type <- f.type
		)
}

rule SmallOperation2Operation {
	from
		f : MM!Operation
	to
		t : MM1!Operation (
			name <- f.name,
			type <- f.returnType,
			ownedParameter <- f.parameters
		)
}

rule SmallParameter2Parameter {
	from
		f : MM!Parameter
	to
		t : MM1!Parameter (
			name <- f.name,
			type <- f.type
		)
}

-- rule used to convert Enumeration's values into UML properties
lazy rule EString2Property {
	from
		f : String
	to
		t : MM1!Property (
			name <- f	
		)
}

rule SmallEnumeration2Enumeration {
	from
		f : MM!Enumeration
	to
		t : MM1!Enumeration (
			name <- f.name,
			ownedAttribute <- f.elements->collect(elt | thisModule.EString2Property(elt))
		)
}

rule SmallAssociation2Association {
	from
		f : MM!Association
	to
		t : MM1!Association (
			name <- f.name,
			memberEnd <- f.roles->collect(role | thisModule.SmallRole2Role(role))
		)
}

lazy rule SmallLowerBound2LowerBound {
	from
		f : String
	to
		t : MM1!LiteralString (
			name <- 'LowerBound',
			value <- f	
		)
}

lazy rule SmallUpperBound2UpperBound {
	from
		f : String
	to
		t : MM1!LiteralString (
			name <- 'UpperBound',
			value <- f	
		)
}

lazy rule SmallRole2Role {
	from
		f : MM!Role
	to
		t : MM1!Property (
			name <- f.name,
			type <- f.entity,
			lowerValue <- thisModule.SmallLowerBound2LowerBound(f.cardinality.lowerBound),
			upperValue <- thisModule.SmallUpperBound2UpperBound(f.cardinality.upperBound)
		)
}